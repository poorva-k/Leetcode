class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        HashMap<Integer,Integer> map1 = new HashMap<>();
        HashMap<Integer,Integer> map2 = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        for(int i = 0 ; i < nums1.length; i ++){
            if(map1.containsKey(nums1[i])){
                int value = map1.get(nums1[i]);
                map1.put(nums1[i], ++value);
            }
            else
                map1.put(nums1[i],1);
        }
        
        
        for(int i = 0 ; i < nums2.length; i ++){
            if(map2.containsKey(nums2[i])){
                int value = map2.get(nums2[i]);
                map2.put(nums2[i], ++value);
            }
            else
                map2.put(nums2[i],1);
        }
        
        
        if(nums1.length < nums2.length){
            list = intersection(map1,map2,nums1,nums2);
        } else{
            list = intersection(map2,map1,nums2,nums1);
        }
        
        int[] res = new int[list.size()];
        for(int k = 0 ; k < list.size(); k++)
            res[k] = list.get(k);
        return res;
    }
    
    
    public List<Integer> intersection(HashMap<Integer,Integer> map1, HashMap<Integer,Integer> map2, int[]  nums1, int[] nums2){
        List<Integer> list = new ArrayList<>();
        for( int i = 0 ; i < nums1.length; i ++){
                if(map2.containsKey(nums1[i])){
                    int count1 = map1.get(nums1[i]);
                    int count2 = map2.get(nums1[i]);
                    int count=0;
                    if(count1<count2)
                        count = count1;
                    else 
                        count = count2;
                    for( int j = 0 ; j < count ; j++){
                        list.add(nums1[i]);
                    }
                    map2.remove(nums1[i]);
                    
                }
            }
        return list;
    }
}